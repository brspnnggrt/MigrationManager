//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.18020.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="UserGroupSoap", Namespace="http://schemas.microsoft.com/sharepoint/soap/directory/")]
public partial class UserGroup : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetUserLoginFromEmailOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveRoleOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateRoleInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddRoleOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRoleInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRoleCollectionOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRoleCollectionFromUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRoleCollectionFromGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRoleCollectionFromWebOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveGroupFromRoleOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateGroupInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddGroupToRoleOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupCollectionOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupCollectionFromUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupCollectionFromRoleOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupCollectionFromWebOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetGroupCollectionFromSiteOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveUserCollectionFromRoleOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveUserFromRoleOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveUserCollectionFromGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveUserFromGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveUserFromWebOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveUserCollectionFromSiteOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoveUserFromSiteOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddUserCollectionToRoleOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddUserToRoleOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddUserCollectionToGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddUserToGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserCollectionOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserCollectionFromRoleOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserCollectionFromGroupOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllUserCollectionFromWebOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserCollectionFromWebOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserCollectionFromSiteOperationCompleted;
    
    /// <remarks/>
    public UserGroup() {
        this.Url = "http://sps.svg.local/_vti_bin/UserGroup.asmx";
    }
    
    /// <remarks/>
    public event GetUserLoginFromEmailCompletedEventHandler GetUserLoginFromEmailCompleted;
    
    /// <remarks/>
    public event RemoveRoleCompletedEventHandler RemoveRoleCompleted;
    
    /// <remarks/>
    public event UpdateRoleInfoCompletedEventHandler UpdateRoleInfoCompleted;
    
    /// <remarks/>
    public event AddRoleCompletedEventHandler AddRoleCompleted;
    
    /// <remarks/>
    public event GetRoleInfoCompletedEventHandler GetRoleInfoCompleted;
    
    /// <remarks/>
    public event GetRoleCollectionCompletedEventHandler GetRoleCollectionCompleted;
    
    /// <remarks/>
    public event GetRoleCollectionFromUserCompletedEventHandler GetRoleCollectionFromUserCompleted;
    
    /// <remarks/>
    public event GetRoleCollectionFromGroupCompletedEventHandler GetRoleCollectionFromGroupCompleted;
    
    /// <remarks/>
    public event GetRoleCollectionFromWebCompletedEventHandler GetRoleCollectionFromWebCompleted;
    
    /// <remarks/>
    public event RemoveGroupFromRoleCompletedEventHandler RemoveGroupFromRoleCompleted;
    
    /// <remarks/>
    public event RemoveGroupCompletedEventHandler RemoveGroupCompleted;
    
    /// <remarks/>
    public event UpdateGroupInfoCompletedEventHandler UpdateGroupInfoCompleted;
    
    /// <remarks/>
    public event AddGroupToRoleCompletedEventHandler AddGroupToRoleCompleted;
    
    /// <remarks/>
    public event AddGroupCompletedEventHandler AddGroupCompleted;
    
    /// <remarks/>
    public event GetGroupInfoCompletedEventHandler GetGroupInfoCompleted;
    
    /// <remarks/>
    public event GetGroupCollectionCompletedEventHandler GetGroupCollectionCompleted;
    
    /// <remarks/>
    public event GetGroupCollectionFromUserCompletedEventHandler GetGroupCollectionFromUserCompleted;
    
    /// <remarks/>
    public event GetGroupCollectionFromRoleCompletedEventHandler GetGroupCollectionFromRoleCompleted;
    
    /// <remarks/>
    public event GetGroupCollectionFromWebCompletedEventHandler GetGroupCollectionFromWebCompleted;
    
    /// <remarks/>
    public event GetGroupCollectionFromSiteCompletedEventHandler GetGroupCollectionFromSiteCompleted;
    
    /// <remarks/>
    public event RemoveUserCollectionFromRoleCompletedEventHandler RemoveUserCollectionFromRoleCompleted;
    
    /// <remarks/>
    public event RemoveUserFromRoleCompletedEventHandler RemoveUserFromRoleCompleted;
    
    /// <remarks/>
    public event RemoveUserCollectionFromGroupCompletedEventHandler RemoveUserCollectionFromGroupCompleted;
    
    /// <remarks/>
    public event RemoveUserFromGroupCompletedEventHandler RemoveUserFromGroupCompleted;
    
    /// <remarks/>
    public event RemoveUserFromWebCompletedEventHandler RemoveUserFromWebCompleted;
    
    /// <remarks/>
    public event RemoveUserCollectionFromSiteCompletedEventHandler RemoveUserCollectionFromSiteCompleted;
    
    /// <remarks/>
    public event RemoveUserFromSiteCompletedEventHandler RemoveUserFromSiteCompleted;
    
    /// <remarks/>
    public event UpdateUserInfoCompletedEventHandler UpdateUserInfoCompleted;
    
    /// <remarks/>
    public event AddUserCollectionToRoleCompletedEventHandler AddUserCollectionToRoleCompleted;
    
    /// <remarks/>
    public event AddUserToRoleCompletedEventHandler AddUserToRoleCompleted;
    
    /// <remarks/>
    public event AddUserCollectionToGroupCompletedEventHandler AddUserCollectionToGroupCompleted;
    
    /// <remarks/>
    public event AddUserToGroupCompletedEventHandler AddUserToGroupCompleted;
    
    /// <remarks/>
    public event GetUserInfoCompletedEventHandler GetUserInfoCompleted;
    
    /// <remarks/>
    public event GetUserCollectionCompletedEventHandler GetUserCollectionCompleted;
    
    /// <remarks/>
    public event GetUserCollectionFromRoleCompletedEventHandler GetUserCollectionFromRoleCompleted;
    
    /// <remarks/>
    public event GetUserCollectionFromGroupCompletedEventHandler GetUserCollectionFromGroupCompleted;
    
    /// <remarks/>
    public event GetAllUserCollectionFromWebCompletedEventHandler GetAllUserCollectionFromWebCompleted;
    
    /// <remarks/>
    public event GetUserCollectionFromWebCompletedEventHandler GetUserCollectionFromWebCompleted;
    
    /// <remarks/>
    public event GetUserCollectionFromSiteCompletedEventHandler GetUserCollectionFromSiteCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserLoginFromEmail", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetUserLoginFromEmail(System.Xml.XmlNode emailXml) {
        object[] results = this.Invoke("GetUserLoginFromEmail", new object[] {
                    emailXml});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserLoginFromEmail(System.Xml.XmlNode emailXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserLoginFromEmail", new object[] {
                    emailXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetUserLoginFromEmail(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserLoginFromEmailAsync(System.Xml.XmlNode emailXml) {
        this.GetUserLoginFromEmailAsync(emailXml, null);
    }
    
    /// <remarks/>
    public void GetUserLoginFromEmailAsync(System.Xml.XmlNode emailXml, object userState) {
        if ((this.GetUserLoginFromEmailOperationCompleted == null)) {
            this.GetUserLoginFromEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserLoginFromEmailOperationCompleted);
        }
        this.InvokeAsync("GetUserLoginFromEmail", new object[] {
                    emailXml}, this.GetUserLoginFromEmailOperationCompleted, userState);
    }
    
    private void OnGetUserLoginFromEmailOperationCompleted(object arg) {
        if ((this.GetUserLoginFromEmailCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserLoginFromEmailCompleted(this, new GetUserLoginFromEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveRole(string roleName) {
        this.Invoke("RemoveRole", new object[] {
                    roleName});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveRole(string roleName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveRole", new object[] {
                    roleName}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveRole(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RemoveRoleAsync(string roleName) {
        this.RemoveRoleAsync(roleName, null);
    }
    
    /// <remarks/>
    public void RemoveRoleAsync(string roleName, object userState) {
        if ((this.RemoveRoleOperationCompleted == null)) {
            this.RemoveRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRoleOperationCompleted);
        }
        this.InvokeAsync("RemoveRole", new object[] {
                    roleName}, this.RemoveRoleOperationCompleted, userState);
    }
    
    private void OnRemoveRoleOperationCompleted(object arg) {
        if ((this.RemoveRoleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/UpdateRoleInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UpdateRoleInfo(string oldRoleName, string roleName, string description, int permissionMask) {
        this.Invoke("UpdateRoleInfo", new object[] {
                    oldRoleName,
                    roleName,
                    description,
                    permissionMask});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateRoleInfo(string oldRoleName, string roleName, string description, int permissionMask, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateRoleInfo", new object[] {
                    oldRoleName,
                    roleName,
                    description,
                    permissionMask}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateRoleInfo(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UpdateRoleInfoAsync(string oldRoleName, string roleName, string description, int permissionMask) {
        this.UpdateRoleInfoAsync(oldRoleName, roleName, description, permissionMask, null);
    }
    
    /// <remarks/>
    public void UpdateRoleInfoAsync(string oldRoleName, string roleName, string description, int permissionMask, object userState) {
        if ((this.UpdateRoleInfoOperationCompleted == null)) {
            this.UpdateRoleInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRoleInfoOperationCompleted);
        }
        this.InvokeAsync("UpdateRoleInfo", new object[] {
                    oldRoleName,
                    roleName,
                    description,
                    permissionMask}, this.UpdateRoleInfoOperationCompleted, userState);
    }
    
    private void OnUpdateRoleInfoOperationCompleted(object arg) {
        if ((this.UpdateRoleInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateRoleInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AddRole(string roleName, string description, int permissionMask) {
        this.Invoke("AddRole", new object[] {
                    roleName,
                    description,
                    permissionMask});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddRole(string roleName, string description, int permissionMask, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddRole", new object[] {
                    roleName,
                    description,
                    permissionMask}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddRole(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void AddRoleAsync(string roleName, string description, int permissionMask) {
        this.AddRoleAsync(roleName, description, permissionMask, null);
    }
    
    /// <remarks/>
    public void AddRoleAsync(string roleName, string description, int permissionMask, object userState) {
        if ((this.AddRoleOperationCompleted == null)) {
            this.AddRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRoleOperationCompleted);
        }
        this.InvokeAsync("AddRole", new object[] {
                    roleName,
                    description,
                    permissionMask}, this.AddRoleOperationCompleted, userState);
    }
    
    private void OnAddRoleOperationCompleted(object arg) {
        if ((this.AddRoleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetRoleInfo(string roleName) {
        object[] results = this.Invoke("GetRoleInfo", new object[] {
                    roleName});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRoleInfo(string roleName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRoleInfo", new object[] {
                    roleName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetRoleInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetRoleInfoAsync(string roleName) {
        this.GetRoleInfoAsync(roleName, null);
    }
    
    /// <remarks/>
    public void GetRoleInfoAsync(string roleName, object userState) {
        if ((this.GetRoleInfoOperationCompleted == null)) {
            this.GetRoleInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleInfoOperationCompleted);
        }
        this.InvokeAsync("GetRoleInfo", new object[] {
                    roleName}, this.GetRoleInfoOperationCompleted, userState);
    }
    
    private void OnGetRoleInfoOperationCompleted(object arg) {
        if ((this.GetRoleInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRoleInfoCompleted(this, new GetRoleInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollection", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetRoleCollection(System.Xml.XmlNode roleNamesXml) {
        object[] results = this.Invoke("GetRoleCollection", new object[] {
                    roleNamesXml});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRoleCollection(System.Xml.XmlNode roleNamesXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRoleCollection", new object[] {
                    roleNamesXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetRoleCollection(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetRoleCollectionAsync(System.Xml.XmlNode roleNamesXml) {
        this.GetRoleCollectionAsync(roleNamesXml, null);
    }
    
    /// <remarks/>
    public void GetRoleCollectionAsync(System.Xml.XmlNode roleNamesXml, object userState) {
        if ((this.GetRoleCollectionOperationCompleted == null)) {
            this.GetRoleCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleCollectionOperationCompleted);
        }
        this.InvokeAsync("GetRoleCollection", new object[] {
                    roleNamesXml}, this.GetRoleCollectionOperationCompleted, userState);
    }
    
    private void OnGetRoleCollectionOperationCompleted(object arg) {
        if ((this.GetRoleCollectionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRoleCollectionCompleted(this, new GetRoleCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromUser", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetRoleCollectionFromUser(string userLoginName) {
        object[] results = this.Invoke("GetRoleCollectionFromUser", new object[] {
                    userLoginName});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRoleCollectionFromUser(string userLoginName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRoleCollectionFromUser", new object[] {
                    userLoginName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetRoleCollectionFromUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetRoleCollectionFromUserAsync(string userLoginName) {
        this.GetRoleCollectionFromUserAsync(userLoginName, null);
    }
    
    /// <remarks/>
    public void GetRoleCollectionFromUserAsync(string userLoginName, object userState) {
        if ((this.GetRoleCollectionFromUserOperationCompleted == null)) {
            this.GetRoleCollectionFromUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleCollectionFromUserOperationCompleted);
        }
        this.InvokeAsync("GetRoleCollectionFromUser", new object[] {
                    userLoginName}, this.GetRoleCollectionFromUserOperationCompleted, userState);
    }
    
    private void OnGetRoleCollectionFromUserOperationCompleted(object arg) {
        if ((this.GetRoleCollectionFromUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRoleCollectionFromUserCompleted(this, new GetRoleCollectionFromUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromGroup" +
        "", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetRoleCollectionFromGroup(string groupName) {
        object[] results = this.Invoke("GetRoleCollectionFromGroup", new object[] {
                    groupName});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRoleCollectionFromGroup(string groupName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRoleCollectionFromGroup", new object[] {
                    groupName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetRoleCollectionFromGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetRoleCollectionFromGroupAsync(string groupName) {
        this.GetRoleCollectionFromGroupAsync(groupName, null);
    }
    
    /// <remarks/>
    public void GetRoleCollectionFromGroupAsync(string groupName, object userState) {
        if ((this.GetRoleCollectionFromGroupOperationCompleted == null)) {
            this.GetRoleCollectionFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleCollectionFromGroupOperationCompleted);
        }
        this.InvokeAsync("GetRoleCollectionFromGroup", new object[] {
                    groupName}, this.GetRoleCollectionFromGroupOperationCompleted, userState);
    }
    
    private void OnGetRoleCollectionFromGroupOperationCompleted(object arg) {
        if ((this.GetRoleCollectionFromGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRoleCollectionFromGroupCompleted(this, new GetRoleCollectionFromGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromWeb", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetRoleCollectionFromWeb() {
        object[] results = this.Invoke("GetRoleCollectionFromWeb", new object[0]);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRoleCollectionFromWeb(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRoleCollectionFromWeb", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetRoleCollectionFromWeb(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetRoleCollectionFromWebAsync() {
        this.GetRoleCollectionFromWebAsync(null);
    }
    
    /// <remarks/>
    public void GetRoleCollectionFromWebAsync(object userState) {
        if ((this.GetRoleCollectionFromWebOperationCompleted == null)) {
            this.GetRoleCollectionFromWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleCollectionFromWebOperationCompleted);
        }
        this.InvokeAsync("GetRoleCollectionFromWeb", new object[0], this.GetRoleCollectionFromWebOperationCompleted, userState);
    }
    
    private void OnGetRoleCollectionFromWebOperationCompleted(object arg) {
        if ((this.GetRoleCollectionFromWebCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRoleCollectionFromWebCompleted(this, new GetRoleCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveGroupFromRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveGroupFromRole(string roleName, string groupName) {
        this.Invoke("RemoveGroupFromRole", new object[] {
                    roleName,
                    groupName});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveGroupFromRole(string roleName, string groupName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveGroupFromRole", new object[] {
                    roleName,
                    groupName}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveGroupFromRole(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RemoveGroupFromRoleAsync(string roleName, string groupName) {
        this.RemoveGroupFromRoleAsync(roleName, groupName, null);
    }
    
    /// <remarks/>
    public void RemoveGroupFromRoleAsync(string roleName, string groupName, object userState) {
        if ((this.RemoveGroupFromRoleOperationCompleted == null)) {
            this.RemoveGroupFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveGroupFromRoleOperationCompleted);
        }
        this.InvokeAsync("RemoveGroupFromRole", new object[] {
                    roleName,
                    groupName}, this.RemoveGroupFromRoleOperationCompleted, userState);
    }
    
    private void OnRemoveGroupFromRoleOperationCompleted(object arg) {
        if ((this.RemoveGroupFromRoleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveGroupFromRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveGroup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveGroup(string groupName) {
        this.Invoke("RemoveGroup", new object[] {
                    groupName});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveGroup(string groupName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveGroup", new object[] {
                    groupName}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveGroup(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RemoveGroupAsync(string groupName) {
        this.RemoveGroupAsync(groupName, null);
    }
    
    /// <remarks/>
    public void RemoveGroupAsync(string groupName, object userState) {
        if ((this.RemoveGroupOperationCompleted == null)) {
            this.RemoveGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveGroupOperationCompleted);
        }
        this.InvokeAsync("RemoveGroup", new object[] {
                    groupName}, this.RemoveGroupOperationCompleted, userState);
    }
    
    private void OnRemoveGroupOperationCompleted(object arg) {
        if ((this.RemoveGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/UpdateGroupInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UpdateGroupInfo(string oldGroupName, string groupName, string ownerIdentifier, string ownerType, string description) {
        this.Invoke("UpdateGroupInfo", new object[] {
                    oldGroupName,
                    groupName,
                    ownerIdentifier,
                    ownerType,
                    description});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateGroupInfo(string oldGroupName, string groupName, string ownerIdentifier, string ownerType, string description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateGroupInfo", new object[] {
                    oldGroupName,
                    groupName,
                    ownerIdentifier,
                    ownerType,
                    description}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateGroupInfo(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UpdateGroupInfoAsync(string oldGroupName, string groupName, string ownerIdentifier, string ownerType, string description) {
        this.UpdateGroupInfoAsync(oldGroupName, groupName, ownerIdentifier, ownerType, description, null);
    }
    
    /// <remarks/>
    public void UpdateGroupInfoAsync(string oldGroupName, string groupName, string ownerIdentifier, string ownerType, string description, object userState) {
        if ((this.UpdateGroupInfoOperationCompleted == null)) {
            this.UpdateGroupInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateGroupInfoOperationCompleted);
        }
        this.InvokeAsync("UpdateGroupInfo", new object[] {
                    oldGroupName,
                    groupName,
                    ownerIdentifier,
                    ownerType,
                    description}, this.UpdateGroupInfoOperationCompleted, userState);
    }
    
    private void OnUpdateGroupInfoOperationCompleted(object arg) {
        if ((this.UpdateGroupInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateGroupInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddGroupToRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AddGroupToRole(string roleName, string groupName) {
        this.Invoke("AddGroupToRole", new object[] {
                    roleName,
                    groupName});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddGroupToRole(string roleName, string groupName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddGroupToRole", new object[] {
                    roleName,
                    groupName}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddGroupToRole(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void AddGroupToRoleAsync(string roleName, string groupName) {
        this.AddGroupToRoleAsync(roleName, groupName, null);
    }
    
    /// <remarks/>
    public void AddGroupToRoleAsync(string roleName, string groupName, object userState) {
        if ((this.AddGroupToRoleOperationCompleted == null)) {
            this.AddGroupToRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddGroupToRoleOperationCompleted);
        }
        this.InvokeAsync("AddGroupToRole", new object[] {
                    roleName,
                    groupName}, this.AddGroupToRoleOperationCompleted, userState);
    }
    
    private void OnAddGroupToRoleOperationCompleted(object arg) {
        if ((this.AddGroupToRoleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddGroupToRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddGroup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AddGroup(string groupName, string ownerIdentifier, string ownerType, string defaultUserLoginName, string description) {
        this.Invoke("AddGroup", new object[] {
                    groupName,
                    ownerIdentifier,
                    ownerType,
                    defaultUserLoginName,
                    description});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddGroup(string groupName, string ownerIdentifier, string ownerType, string defaultUserLoginName, string description, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddGroup", new object[] {
                    groupName,
                    ownerIdentifier,
                    ownerType,
                    defaultUserLoginName,
                    description}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddGroup(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void AddGroupAsync(string groupName, string ownerIdentifier, string ownerType, string defaultUserLoginName, string description) {
        this.AddGroupAsync(groupName, ownerIdentifier, ownerType, defaultUserLoginName, description, null);
    }
    
    /// <remarks/>
    public void AddGroupAsync(string groupName, string ownerIdentifier, string ownerType, string defaultUserLoginName, string description, object userState) {
        if ((this.AddGroupOperationCompleted == null)) {
            this.AddGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddGroupOperationCompleted);
        }
        this.InvokeAsync("AddGroup", new object[] {
                    groupName,
                    ownerIdentifier,
                    ownerType,
                    defaultUserLoginName,
                    description}, this.AddGroupOperationCompleted, userState);
    }
    
    private void OnAddGroupOperationCompleted(object arg) {
        if ((this.AddGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetGroupInfo(string groupName) {
        object[] results = this.Invoke("GetGroupInfo", new object[] {
                    groupName});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetGroupInfo(string groupName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupInfo", new object[] {
                    groupName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetGroupInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetGroupInfoAsync(string groupName) {
        this.GetGroupInfoAsync(groupName, null);
    }
    
    /// <remarks/>
    public void GetGroupInfoAsync(string groupName, object userState) {
        if ((this.GetGroupInfoOperationCompleted == null)) {
            this.GetGroupInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupInfoOperationCompleted);
        }
        this.InvokeAsync("GetGroupInfo", new object[] {
                    groupName}, this.GetGroupInfoOperationCompleted, userState);
    }
    
    private void OnGetGroupInfoOperationCompleted(object arg) {
        if ((this.GetGroupInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupInfoCompleted(this, new GetGroupInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollection", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetGroupCollection(System.Xml.XmlNode groupNamesXml) {
        object[] results = this.Invoke("GetGroupCollection", new object[] {
                    groupNamesXml});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetGroupCollection(System.Xml.XmlNode groupNamesXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupCollection", new object[] {
                    groupNamesXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetGroupCollection(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetGroupCollectionAsync(System.Xml.XmlNode groupNamesXml) {
        this.GetGroupCollectionAsync(groupNamesXml, null);
    }
    
    /// <remarks/>
    public void GetGroupCollectionAsync(System.Xml.XmlNode groupNamesXml, object userState) {
        if ((this.GetGroupCollectionOperationCompleted == null)) {
            this.GetGroupCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupCollectionOperationCompleted);
        }
        this.InvokeAsync("GetGroupCollection", new object[] {
                    groupNamesXml}, this.GetGroupCollectionOperationCompleted, userState);
    }
    
    private void OnGetGroupCollectionOperationCompleted(object arg) {
        if ((this.GetGroupCollectionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupCollectionCompleted(this, new GetGroupCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromUser" +
        "", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetGroupCollectionFromUser(string userLoginName) {
        object[] results = this.Invoke("GetGroupCollectionFromUser", new object[] {
                    userLoginName});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetGroupCollectionFromUser(string userLoginName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupCollectionFromUser", new object[] {
                    userLoginName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetGroupCollectionFromUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetGroupCollectionFromUserAsync(string userLoginName) {
        this.GetGroupCollectionFromUserAsync(userLoginName, null);
    }
    
    /// <remarks/>
    public void GetGroupCollectionFromUserAsync(string userLoginName, object userState) {
        if ((this.GetGroupCollectionFromUserOperationCompleted == null)) {
            this.GetGroupCollectionFromUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupCollectionFromUserOperationCompleted);
        }
        this.InvokeAsync("GetGroupCollectionFromUser", new object[] {
                    userLoginName}, this.GetGroupCollectionFromUserOperationCompleted, userState);
    }
    
    private void OnGetGroupCollectionFromUserOperationCompleted(object arg) {
        if ((this.GetGroupCollectionFromUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupCollectionFromUserCompleted(this, new GetGroupCollectionFromUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromRole" +
        "", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetGroupCollectionFromRole(string roleName) {
        object[] results = this.Invoke("GetGroupCollectionFromRole", new object[] {
                    roleName});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetGroupCollectionFromRole(string roleName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupCollectionFromRole", new object[] {
                    roleName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetGroupCollectionFromRole(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetGroupCollectionFromRoleAsync(string roleName) {
        this.GetGroupCollectionFromRoleAsync(roleName, null);
    }
    
    /// <remarks/>
    public void GetGroupCollectionFromRoleAsync(string roleName, object userState) {
        if ((this.GetGroupCollectionFromRoleOperationCompleted == null)) {
            this.GetGroupCollectionFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupCollectionFromRoleOperationCompleted);
        }
        this.InvokeAsync("GetGroupCollectionFromRole", new object[] {
                    roleName}, this.GetGroupCollectionFromRoleOperationCompleted, userState);
    }
    
    private void OnGetGroupCollectionFromRoleOperationCompleted(object arg) {
        if ((this.GetGroupCollectionFromRoleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupCollectionFromRoleCompleted(this, new GetGroupCollectionFromRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromWeb", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetGroupCollectionFromWeb() {
        object[] results = this.Invoke("GetGroupCollectionFromWeb", new object[0]);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetGroupCollectionFromWeb(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupCollectionFromWeb", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetGroupCollectionFromWeb(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetGroupCollectionFromWebAsync() {
        this.GetGroupCollectionFromWebAsync(null);
    }
    
    /// <remarks/>
    public void GetGroupCollectionFromWebAsync(object userState) {
        if ((this.GetGroupCollectionFromWebOperationCompleted == null)) {
            this.GetGroupCollectionFromWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupCollectionFromWebOperationCompleted);
        }
        this.InvokeAsync("GetGroupCollectionFromWeb", new object[0], this.GetGroupCollectionFromWebOperationCompleted, userState);
    }
    
    private void OnGetGroupCollectionFromWebOperationCompleted(object arg) {
        if ((this.GetGroupCollectionFromWebCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupCollectionFromWebCompleted(this, new GetGroupCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromSite" +
        "", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetGroupCollectionFromSite() {
        object[] results = this.Invoke("GetGroupCollectionFromSite", new object[0]);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetGroupCollectionFromSite(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGroupCollectionFromSite", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetGroupCollectionFromSite(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetGroupCollectionFromSiteAsync() {
        this.GetGroupCollectionFromSiteAsync(null);
    }
    
    /// <remarks/>
    public void GetGroupCollectionFromSiteAsync(object userState) {
        if ((this.GetGroupCollectionFromSiteOperationCompleted == null)) {
            this.GetGroupCollectionFromSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupCollectionFromSiteOperationCompleted);
        }
        this.InvokeAsync("GetGroupCollectionFromSite", new object[0], this.GetGroupCollectionFromSiteOperationCompleted, userState);
    }
    
    private void OnGetGroupCollectionFromSiteOperationCompleted(object arg) {
        if ((this.GetGroupCollectionFromSiteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetGroupCollectionFromSiteCompleted(this, new GetGroupCollectionFromSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromRo" +
        "le", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveUserCollectionFromRole(string roleName, System.Xml.XmlNode userLoginNamesXml) {
        this.Invoke("RemoveUserCollectionFromRole", new object[] {
                    roleName,
                    userLoginNamesXml});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveUserCollectionFromRole(string roleName, System.Xml.XmlNode userLoginNamesXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveUserCollectionFromRole", new object[] {
                    roleName,
                    userLoginNamesXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveUserCollectionFromRole(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RemoveUserCollectionFromRoleAsync(string roleName, System.Xml.XmlNode userLoginNamesXml) {
        this.RemoveUserCollectionFromRoleAsync(roleName, userLoginNamesXml, null);
    }
    
    /// <remarks/>
    public void RemoveUserCollectionFromRoleAsync(string roleName, System.Xml.XmlNode userLoginNamesXml, object userState) {
        if ((this.RemoveUserCollectionFromRoleOperationCompleted == null)) {
            this.RemoveUserCollectionFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserCollectionFromRoleOperationCompleted);
        }
        this.InvokeAsync("RemoveUserCollectionFromRole", new object[] {
                    roleName,
                    userLoginNamesXml}, this.RemoveUserCollectionFromRoleOperationCompleted, userState);
    }
    
    private void OnRemoveUserCollectionFromRoleOperationCompleted(object arg) {
        if ((this.RemoveUserCollectionFromRoleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveUserCollectionFromRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveUserFromRole(string roleName, string userLoginName) {
        this.Invoke("RemoveUserFromRole", new object[] {
                    roleName,
                    userLoginName});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveUserFromRole(string roleName, string userLoginName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveUserFromRole", new object[] {
                    roleName,
                    userLoginName}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveUserFromRole(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RemoveUserFromRoleAsync(string roleName, string userLoginName) {
        this.RemoveUserFromRoleAsync(roleName, userLoginName, null);
    }
    
    /// <remarks/>
    public void RemoveUserFromRoleAsync(string roleName, string userLoginName, object userState) {
        if ((this.RemoveUserFromRoleOperationCompleted == null)) {
            this.RemoveUserFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromRoleOperationCompleted);
        }
        this.InvokeAsync("RemoveUserFromRole", new object[] {
                    roleName,
                    userLoginName}, this.RemoveUserFromRoleOperationCompleted, userState);
    }
    
    private void OnRemoveUserFromRoleOperationCompleted(object arg) {
        if ((this.RemoveUserFromRoleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveUserFromRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromGr" +
        "oup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveUserCollectionFromGroup(string groupName, System.Xml.XmlNode userLoginNamesXml) {
        this.Invoke("RemoveUserCollectionFromGroup", new object[] {
                    groupName,
                    userLoginNamesXml});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveUserCollectionFromGroup(string groupName, System.Xml.XmlNode userLoginNamesXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveUserCollectionFromGroup", new object[] {
                    groupName,
                    userLoginNamesXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveUserCollectionFromGroup(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RemoveUserCollectionFromGroupAsync(string groupName, System.Xml.XmlNode userLoginNamesXml) {
        this.RemoveUserCollectionFromGroupAsync(groupName, userLoginNamesXml, null);
    }
    
    /// <remarks/>
    public void RemoveUserCollectionFromGroupAsync(string groupName, System.Xml.XmlNode userLoginNamesXml, object userState) {
        if ((this.RemoveUserCollectionFromGroupOperationCompleted == null)) {
            this.RemoveUserCollectionFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserCollectionFromGroupOperationCompleted);
        }
        this.InvokeAsync("RemoveUserCollectionFromGroup", new object[] {
                    groupName,
                    userLoginNamesXml}, this.RemoveUserCollectionFromGroupOperationCompleted, userState);
    }
    
    private void OnRemoveUserCollectionFromGroupOperationCompleted(object arg) {
        if ((this.RemoveUserCollectionFromGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveUserCollectionFromGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromGroup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveUserFromGroup(string groupName, string userLoginName) {
        this.Invoke("RemoveUserFromGroup", new object[] {
                    groupName,
                    userLoginName});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveUserFromGroup(string groupName, string userLoginName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveUserFromGroup", new object[] {
                    groupName,
                    userLoginName}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveUserFromGroup(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RemoveUserFromGroupAsync(string groupName, string userLoginName) {
        this.RemoveUserFromGroupAsync(groupName, userLoginName, null);
    }
    
    /// <remarks/>
    public void RemoveUserFromGroupAsync(string groupName, string userLoginName, object userState) {
        if ((this.RemoveUserFromGroupOperationCompleted == null)) {
            this.RemoveUserFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromGroupOperationCompleted);
        }
        this.InvokeAsync("RemoveUserFromGroup", new object[] {
                    groupName,
                    userLoginName}, this.RemoveUserFromGroupOperationCompleted, userState);
    }
    
    private void OnRemoveUserFromGroupOperationCompleted(object arg) {
        if ((this.RemoveUserFromGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveUserFromGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromWeb", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveUserFromWeb(string userLoginName) {
        this.Invoke("RemoveUserFromWeb", new object[] {
                    userLoginName});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveUserFromWeb(string userLoginName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveUserFromWeb", new object[] {
                    userLoginName}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveUserFromWeb(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RemoveUserFromWebAsync(string userLoginName) {
        this.RemoveUserFromWebAsync(userLoginName, null);
    }
    
    /// <remarks/>
    public void RemoveUserFromWebAsync(string userLoginName, object userState) {
        if ((this.RemoveUserFromWebOperationCompleted == null)) {
            this.RemoveUserFromWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromWebOperationCompleted);
        }
        this.InvokeAsync("RemoveUserFromWeb", new object[] {
                    userLoginName}, this.RemoveUserFromWebOperationCompleted, userState);
    }
    
    private void OnRemoveUserFromWebOperationCompleted(object arg) {
        if ((this.RemoveUserFromWebCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveUserFromWebCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromSi" +
        "te", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveUserCollectionFromSite(System.Xml.XmlNode userLoginNamesXml) {
        this.Invoke("RemoveUserCollectionFromSite", new object[] {
                    userLoginNamesXml});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveUserCollectionFromSite(System.Xml.XmlNode userLoginNamesXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveUserCollectionFromSite", new object[] {
                    userLoginNamesXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveUserCollectionFromSite(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RemoveUserCollectionFromSiteAsync(System.Xml.XmlNode userLoginNamesXml) {
        this.RemoveUserCollectionFromSiteAsync(userLoginNamesXml, null);
    }
    
    /// <remarks/>
    public void RemoveUserCollectionFromSiteAsync(System.Xml.XmlNode userLoginNamesXml, object userState) {
        if ((this.RemoveUserCollectionFromSiteOperationCompleted == null)) {
            this.RemoveUserCollectionFromSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserCollectionFromSiteOperationCompleted);
        }
        this.InvokeAsync("RemoveUserCollectionFromSite", new object[] {
                    userLoginNamesXml}, this.RemoveUserCollectionFromSiteOperationCompleted, userState);
    }
    
    private void OnRemoveUserCollectionFromSiteOperationCompleted(object arg) {
        if ((this.RemoveUserCollectionFromSiteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveUserCollectionFromSiteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromSite", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveUserFromSite(string userLoginName) {
        this.Invoke("RemoveUserFromSite", new object[] {
                    userLoginName});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveUserFromSite(string userLoginName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveUserFromSite", new object[] {
                    userLoginName}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveUserFromSite(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RemoveUserFromSiteAsync(string userLoginName) {
        this.RemoveUserFromSiteAsync(userLoginName, null);
    }
    
    /// <remarks/>
    public void RemoveUserFromSiteAsync(string userLoginName, object userState) {
        if ((this.RemoveUserFromSiteOperationCompleted == null)) {
            this.RemoveUserFromSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromSiteOperationCompleted);
        }
        this.InvokeAsync("RemoveUserFromSite", new object[] {
                    userLoginName}, this.RemoveUserFromSiteOperationCompleted, userState);
    }
    
    private void OnRemoveUserFromSiteOperationCompleted(object arg) {
        if ((this.RemoveUserFromSiteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoveUserFromSiteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/UpdateUserInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UpdateUserInfo(string userLoginName, string userName, string userEmail, string userNotes) {
        this.Invoke("UpdateUserInfo", new object[] {
                    userLoginName,
                    userName,
                    userEmail,
                    userNotes});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateUserInfo(string userLoginName, string userName, string userEmail, string userNotes, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserInfo", new object[] {
                    userLoginName,
                    userName,
                    userEmail,
                    userNotes}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateUserInfo(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UpdateUserInfoAsync(string userLoginName, string userName, string userEmail, string userNotes) {
        this.UpdateUserInfoAsync(userLoginName, userName, userEmail, userNotes, null);
    }
    
    /// <remarks/>
    public void UpdateUserInfoAsync(string userLoginName, string userName, string userEmail, string userNotes, object userState) {
        if ((this.UpdateUserInfoOperationCompleted == null)) {
            this.UpdateUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserInfoOperationCompleted);
        }
        this.InvokeAsync("UpdateUserInfo", new object[] {
                    userLoginName,
                    userName,
                    userEmail,
                    userNotes}, this.UpdateUserInfoOperationCompleted, userState);
    }
    
    private void OnUpdateUserInfoOperationCompleted(object arg) {
        if ((this.UpdateUserInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserCollectionToRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AddUserCollectionToRole(string roleName, System.Xml.XmlNode usersInfoXml) {
        this.Invoke("AddUserCollectionToRole", new object[] {
                    roleName,
                    usersInfoXml});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddUserCollectionToRole(string roleName, System.Xml.XmlNode usersInfoXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddUserCollectionToRole", new object[] {
                    roleName,
                    usersInfoXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddUserCollectionToRole(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void AddUserCollectionToRoleAsync(string roleName, System.Xml.XmlNode usersInfoXml) {
        this.AddUserCollectionToRoleAsync(roleName, usersInfoXml, null);
    }
    
    /// <remarks/>
    public void AddUserCollectionToRoleAsync(string roleName, System.Xml.XmlNode usersInfoXml, object userState) {
        if ((this.AddUserCollectionToRoleOperationCompleted == null)) {
            this.AddUserCollectionToRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserCollectionToRoleOperationCompleted);
        }
        this.InvokeAsync("AddUserCollectionToRole", new object[] {
                    roleName,
                    usersInfoXml}, this.AddUserCollectionToRoleOperationCompleted, userState);
    }
    
    private void OnAddUserCollectionToRoleOperationCompleted(object arg) {
        if ((this.AddUserCollectionToRoleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddUserCollectionToRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserToRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AddUserToRole(string roleName, string userName, string userLoginName, string userEmail, string userNotes) {
        this.Invoke("AddUserToRole", new object[] {
                    roleName,
                    userName,
                    userLoginName,
                    userEmail,
                    userNotes});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddUserToRole(string roleName, string userName, string userLoginName, string userEmail, string userNotes, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddUserToRole", new object[] {
                    roleName,
                    userName,
                    userLoginName,
                    userEmail,
                    userNotes}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddUserToRole(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void AddUserToRoleAsync(string roleName, string userName, string userLoginName, string userEmail, string userNotes) {
        this.AddUserToRoleAsync(roleName, userName, userLoginName, userEmail, userNotes, null);
    }
    
    /// <remarks/>
    public void AddUserToRoleAsync(string roleName, string userName, string userLoginName, string userEmail, string userNotes, object userState) {
        if ((this.AddUserToRoleOperationCompleted == null)) {
            this.AddUserToRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserToRoleOperationCompleted);
        }
        this.InvokeAsync("AddUserToRole", new object[] {
                    roleName,
                    userName,
                    userLoginName,
                    userEmail,
                    userNotes}, this.AddUserToRoleOperationCompleted, userState);
    }
    
    private void OnAddUserToRoleOperationCompleted(object arg) {
        if ((this.AddUserToRoleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddUserToRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserCollectionToGroup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AddUserCollectionToGroup(string groupName, System.Xml.XmlNode usersInfoXml) {
        this.Invoke("AddUserCollectionToGroup", new object[] {
                    groupName,
                    usersInfoXml});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddUserCollectionToGroup(string groupName, System.Xml.XmlNode usersInfoXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddUserCollectionToGroup", new object[] {
                    groupName,
                    usersInfoXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddUserCollectionToGroup(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void AddUserCollectionToGroupAsync(string groupName, System.Xml.XmlNode usersInfoXml) {
        this.AddUserCollectionToGroupAsync(groupName, usersInfoXml, null);
    }
    
    /// <remarks/>
    public void AddUserCollectionToGroupAsync(string groupName, System.Xml.XmlNode usersInfoXml, object userState) {
        if ((this.AddUserCollectionToGroupOperationCompleted == null)) {
            this.AddUserCollectionToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserCollectionToGroupOperationCompleted);
        }
        this.InvokeAsync("AddUserCollectionToGroup", new object[] {
                    groupName,
                    usersInfoXml}, this.AddUserCollectionToGroupOperationCompleted, userState);
    }
    
    private void OnAddUserCollectionToGroupOperationCompleted(object arg) {
        if ((this.AddUserCollectionToGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddUserCollectionToGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserToGroup", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AddUserToGroup(string groupName, string userName, string userLoginName, string userEmail, string userNotes) {
        this.Invoke("AddUserToGroup", new object[] {
                    groupName,
                    userName,
                    userLoginName,
                    userEmail,
                    userNotes});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddUserToGroup(string groupName, string userName, string userLoginName, string userEmail, string userNotes, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddUserToGroup", new object[] {
                    groupName,
                    userName,
                    userLoginName,
                    userEmail,
                    userNotes}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddUserToGroup(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void AddUserToGroupAsync(string groupName, string userName, string userLoginName, string userEmail, string userNotes) {
        this.AddUserToGroupAsync(groupName, userName, userLoginName, userEmail, userNotes, null);
    }
    
    /// <remarks/>
    public void AddUserToGroupAsync(string groupName, string userName, string userLoginName, string userEmail, string userNotes, object userState) {
        if ((this.AddUserToGroupOperationCompleted == null)) {
            this.AddUserToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserToGroupOperationCompleted);
        }
        this.InvokeAsync("AddUserToGroup", new object[] {
                    groupName,
                    userName,
                    userLoginName,
                    userEmail,
                    userNotes}, this.AddUserToGroupOperationCompleted, userState);
    }
    
    private void OnAddUserToGroupOperationCompleted(object arg) {
        if ((this.AddUserToGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddUserToGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserInfo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetUserInfo(string userLoginName) {
        object[] results = this.Invoke("GetUserInfo", new object[] {
                    userLoginName});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserInfo(string userLoginName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserInfo", new object[] {
                    userLoginName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetUserInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserInfoAsync(string userLoginName) {
        this.GetUserInfoAsync(userLoginName, null);
    }
    
    /// <remarks/>
    public void GetUserInfoAsync(string userLoginName, object userState) {
        if ((this.GetUserInfoOperationCompleted == null)) {
            this.GetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoOperationCompleted);
        }
        this.InvokeAsync("GetUserInfo", new object[] {
                    userLoginName}, this.GetUserInfoOperationCompleted, userState);
    }
    
    private void OnGetUserInfoOperationCompleted(object arg) {
        if ((this.GetUserInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollection", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetUserCollection(System.Xml.XmlNode userLoginNamesXml) {
        object[] results = this.Invoke("GetUserCollection", new object[] {
                    userLoginNamesXml});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserCollection(System.Xml.XmlNode userLoginNamesXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserCollection", new object[] {
                    userLoginNamesXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetUserCollection(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserCollectionAsync(System.Xml.XmlNode userLoginNamesXml) {
        this.GetUserCollectionAsync(userLoginNamesXml, null);
    }
    
    /// <remarks/>
    public void GetUserCollectionAsync(System.Xml.XmlNode userLoginNamesXml, object userState) {
        if ((this.GetUserCollectionOperationCompleted == null)) {
            this.GetUserCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCollectionOperationCompleted);
        }
        this.InvokeAsync("GetUserCollection", new object[] {
                    userLoginNamesXml}, this.GetUserCollectionOperationCompleted, userState);
    }
    
    private void OnGetUserCollectionOperationCompleted(object arg) {
        if ((this.GetUserCollectionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCollectionCompleted(this, new GetUserCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromRole", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetUserCollectionFromRole(string roleName) {
        object[] results = this.Invoke("GetUserCollectionFromRole", new object[] {
                    roleName});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserCollectionFromRole(string roleName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserCollectionFromRole", new object[] {
                    roleName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetUserCollectionFromRole(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserCollectionFromRoleAsync(string roleName) {
        this.GetUserCollectionFromRoleAsync(roleName, null);
    }
    
    /// <remarks/>
    public void GetUserCollectionFromRoleAsync(string roleName, object userState) {
        if ((this.GetUserCollectionFromRoleOperationCompleted == null)) {
            this.GetUserCollectionFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCollectionFromRoleOperationCompleted);
        }
        this.InvokeAsync("GetUserCollectionFromRole", new object[] {
                    roleName}, this.GetUserCollectionFromRoleOperationCompleted, userState);
    }
    
    private void OnGetUserCollectionFromRoleOperationCompleted(object arg) {
        if ((this.GetUserCollectionFromRoleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCollectionFromRoleCompleted(this, new GetUserCollectionFromRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromGroup" +
        "", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetUserCollectionFromGroup(string groupName) {
        object[] results = this.Invoke("GetUserCollectionFromGroup", new object[] {
                    groupName});
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserCollectionFromGroup(string groupName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserCollectionFromGroup", new object[] {
                    groupName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetUserCollectionFromGroup(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserCollectionFromGroupAsync(string groupName) {
        this.GetUserCollectionFromGroupAsync(groupName, null);
    }
    
    /// <remarks/>
    public void GetUserCollectionFromGroupAsync(string groupName, object userState) {
        if ((this.GetUserCollectionFromGroupOperationCompleted == null)) {
            this.GetUserCollectionFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCollectionFromGroupOperationCompleted);
        }
        this.InvokeAsync("GetUserCollectionFromGroup", new object[] {
                    groupName}, this.GetUserCollectionFromGroupOperationCompleted, userState);
    }
    
    private void OnGetUserCollectionFromGroupOperationCompleted(object arg) {
        if ((this.GetUserCollectionFromGroupCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCollectionFromGroupCompleted(this, new GetUserCollectionFromGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetAllUserCollectionFromWe" +
        "b", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetAllUserCollectionFromWeb() {
        object[] results = this.Invoke("GetAllUserCollectionFromWeb", new object[0]);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllUserCollectionFromWeb(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllUserCollectionFromWeb", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetAllUserCollectionFromWeb(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllUserCollectionFromWebAsync() {
        this.GetAllUserCollectionFromWebAsync(null);
    }
    
    /// <remarks/>
    public void GetAllUserCollectionFromWebAsync(object userState) {
        if ((this.GetAllUserCollectionFromWebOperationCompleted == null)) {
            this.GetAllUserCollectionFromWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUserCollectionFromWebOperationCompleted);
        }
        this.InvokeAsync("GetAllUserCollectionFromWeb", new object[0], this.GetAllUserCollectionFromWebOperationCompleted, userState);
    }
    
    private void OnGetAllUserCollectionFromWebOperationCompleted(object arg) {
        if ((this.GetAllUserCollectionFromWebCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllUserCollectionFromWebCompleted(this, new GetAllUserCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromWeb", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetUserCollectionFromWeb() {
        object[] results = this.Invoke("GetUserCollectionFromWeb", new object[0]);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserCollectionFromWeb(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserCollectionFromWeb", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetUserCollectionFromWeb(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserCollectionFromWebAsync() {
        this.GetUserCollectionFromWebAsync(null);
    }
    
    /// <remarks/>
    public void GetUserCollectionFromWebAsync(object userState) {
        if ((this.GetUserCollectionFromWebOperationCompleted == null)) {
            this.GetUserCollectionFromWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCollectionFromWebOperationCompleted);
        }
        this.InvokeAsync("GetUserCollectionFromWeb", new object[0], this.GetUserCollectionFromWebOperationCompleted, userState);
    }
    
    private void OnGetUserCollectionFromWebOperationCompleted(object arg) {
        if ((this.GetUserCollectionFromWebCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCollectionFromWebCompleted(this, new GetUserCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromSite", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/directory/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetUserCollectionFromSite() {
        object[] results = this.Invoke("GetUserCollectionFromSite", new object[0]);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserCollectionFromSite(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserCollectionFromSite", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public System.Xml.XmlNode EndGetUserCollectionFromSite(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserCollectionFromSiteAsync() {
        this.GetUserCollectionFromSiteAsync(null);
    }
    
    /// <remarks/>
    public void GetUserCollectionFromSiteAsync(object userState) {
        if ((this.GetUserCollectionFromSiteOperationCompleted == null)) {
            this.GetUserCollectionFromSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCollectionFromSiteOperationCompleted);
        }
        this.InvokeAsync("GetUserCollectionFromSite", new object[0], this.GetUserCollectionFromSiteOperationCompleted, userState);
    }
    
    private void OnGetUserCollectionFromSiteOperationCompleted(object arg) {
        if ((this.GetUserCollectionFromSiteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCollectionFromSiteCompleted(this, new GetUserCollectionFromSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetUserLoginFromEmailCompletedEventHandler(object sender, GetUserLoginFromEmailCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserLoginFromEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserLoginFromEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void RemoveRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void UpdateRoleInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void AddRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetRoleInfoCompletedEventHandler(object sender, GetRoleInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRoleInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRoleInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetRoleCollectionCompletedEventHandler(object sender, GetRoleCollectionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRoleCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRoleCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetRoleCollectionFromUserCompletedEventHandler(object sender, GetRoleCollectionFromUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRoleCollectionFromUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRoleCollectionFromUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetRoleCollectionFromGroupCompletedEventHandler(object sender, GetRoleCollectionFromGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRoleCollectionFromGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRoleCollectionFromGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetRoleCollectionFromWebCompletedEventHandler(object sender, GetRoleCollectionFromWebCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRoleCollectionFromWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRoleCollectionFromWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void RemoveGroupFromRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void RemoveGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void UpdateGroupInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void AddGroupToRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void AddGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetGroupInfoCompletedEventHandler(object sender, GetGroupInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetGroupInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetGroupCollectionCompletedEventHandler(object sender, GetGroupCollectionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetGroupCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetGroupCollectionFromUserCompletedEventHandler(object sender, GetGroupCollectionFromUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetGroupCollectionFromUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupCollectionFromUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetGroupCollectionFromRoleCompletedEventHandler(object sender, GetGroupCollectionFromRoleCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetGroupCollectionFromRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupCollectionFromRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetGroupCollectionFromWebCompletedEventHandler(object sender, GetGroupCollectionFromWebCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetGroupCollectionFromWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupCollectionFromWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetGroupCollectionFromSiteCompletedEventHandler(object sender, GetGroupCollectionFromSiteCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetGroupCollectionFromSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetGroupCollectionFromSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void RemoveUserCollectionFromRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void RemoveUserFromRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void RemoveUserCollectionFromGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void RemoveUserFromGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void RemoveUserFromWebCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void RemoveUserCollectionFromSiteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void RemoveUserFromSiteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void UpdateUserInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void AddUserCollectionToRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void AddUserToRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void AddUserCollectionToGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void AddUserToGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetUserInfoCompletedEventHandler(object sender, GetUserInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetUserCollectionCompletedEventHandler(object sender, GetUserCollectionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetUserCollectionFromRoleCompletedEventHandler(object sender, GetUserCollectionFromRoleCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserCollectionFromRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserCollectionFromRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetUserCollectionFromGroupCompletedEventHandler(object sender, GetUserCollectionFromGroupCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserCollectionFromGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserCollectionFromGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetAllUserCollectionFromWebCompletedEventHandler(object sender, GetAllUserCollectionFromWebCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllUserCollectionFromWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllUserCollectionFromWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetUserCollectionFromWebCompletedEventHandler(object sender, GetUserCollectionFromWebCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserCollectionFromWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserCollectionFromWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
public delegate void GetUserCollectionFromSiteCompletedEventHandler(object sender, GetUserCollectionFromSiteCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserCollectionFromSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserCollectionFromSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Xml.XmlNode Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}
